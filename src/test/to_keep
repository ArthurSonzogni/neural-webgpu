#include <iostream>
#include "Example.hpp"
#include "GPU.hpp"
#include "Model.hpp"
#include "Node.hpp"
#include "Shader.hpp"
#include "Tensor.hpp"
#include "mnist/mnist_reader.hpp"

std::vector<Example> GetExamplesCentered(
    const std::vector<std::vector<float>>& input,
    const std::vector<uint8_t>& output) {
  std::vector<Example> examples;
  for (size_t i = 0; i < input.size(); ++i) {
    std::vector<float> input_example = input[i];
    for (auto& p : input_example) {
      p /= 256.0f;
      p = 2.0 * p - 1;
    }

    std::vector<float> output_example(10, 0.f);
    output_example[output[i]] = 1.f;

    examples.push_back({
        input_example,
        output_example,
    });
  }

  return examples;
}

TEST(Linear, Forward) {
  GPU gpu;

  int batch_size = 1000;
  int mnist_width = 28;
  int mnist_height = 28;

  Node input = Input(gpu, {
                              mnist_width,
                              mnist_height,
                              batch_size,
                          });

  auto layers = [](Node X) {
    // X                // Size: 28x28x1000
    X = Linear(X, 10);  // Size: 10x1000
    return X;
  };

  Node output = layers(input);

  Model model(input, output);
  model.Train();
  model.Train();
  model.Train();
}

